"use client"
import React, { useState, useEffect } from 'react';
import { 
  useGetDonationsQuery,
  useGetDonationQuery,
  useGetProjectDonationsQuery,
  useGetUserDonationsQuery,
  useGetRecentDonationsQuery,
  useGetDonationQRQuery,
  useRedeemRewardMutation,
  useGetPendingRewardsQuery,
  useGetDonationStatisticsQuery,
  useUpdateDonorMessageMutation
} from "@/state/api";

const DonationAPITest = () => {
  const [activeTest, setActiveTest] = useState('project-overview');
  const [testInputs, setTestInputs] = useState({
    // Your real project data
    projectId: '68ce8c5f2c240acdd7105198',
    creatorId: '68ce87562c240acdd7105121',
    userId: '68ce87562c240acdd7105121', // Your test user
    
    // Donation filtering
    minAmount: 10,
    maxAmount: 10000,
    startDate: '2024-01-01',
    endDate: '2025-12-31',
    status: 'SUCCESS',
    hasReward: '',
    
    // Specific donation testing
    donationId: '',
    
    // QR testing
    qrFormat: 'url',
    
    // Reward management
    redeemNotes: 'Test redemption via API',
    redeemedBy: 'admin',
    
    // Message update
    donorMessage: 'Thank you for this amazing project! Looking forward to the rooftop gardens.',
    
    // Statistics
    statisticsGroupBy: 'day'
  });

  // Your real project data from MongoDB
  const realProjectData = {
    _id: "68c2c1b0a5a3afe2be892d4c",
    title: "Updated Project Title - 5:02:28 PM",
    shortDescription: "Creating sustainable rooftop gardens in urban Dhaka for fresh vegetables and community income.",
    category: "environment",
    targetAmount: 75000,
    currentAmount: 0,
    backerCount: 0,
    location: {
      district: "Dhaka",
      division: "Dhaka"
    },
    rewardTiers: [
      {
        _id: "68c2c1b0a5a3afe2be892d4d",
        title: "Garden Supporter",
        description: "Monthly photo updates of garden progress + recipe booklet featuring rooftop-grown vegetables",
        minimumAmount: 50,
        maxBackers: 200,
        currentBackers: 0
      },
      {
        _id: "68c2c1b0a5a3afe2be892d4e",
        title: "Fresh Harvest Box",
        description: "All previous rewards + monthly delivery of fresh vegetables from our rooftop gardens (3 months)",
        minimumAmount: 150,
        maxBackers: 75,
        currentBackers: 0
      },
      {
        _id: "68c2c1b0a5a3afe2be892d4f",
        title: "Garden Mentor",
        description: "All previous rewards + personal rooftop garden consultation + exclusive workshop on urban farming techniques",
        minimumAmount: 500,
        maxBackers: 20,
        currentBackers: 0
      }
    ]
  };

  // API Hooks
  const { data: donationsData, error: donationsError, refetch: refetchDonations, isLoading: isDonationsLoading } = useGetDonationsQuery({
    page: 1,
    limit: 20,
    projectId: testInputs.projectId,
    status: testInputs.status,
    minAmount: testInputs.minAmount,
    maxAmount: testInputs.maxAmount,
    startDate: testInputs.startDate,
    endDate: testInputs.endDate,
    hasReward: testInputs.hasReward || undefined,
    sort: 'createdAt',
    sortOrder: 'desc'
  });

  const { data: donationData, error: donationError, refetch: refetchDonation, isLoading: isDonationLoading } = useGetDonationQuery(testInputs.donationId, {
    skip: !testInputs.donationId
  });

  const { data: projectDonationsData, error: projectDonationsError, refetch: refetchProjectDonations, isLoading: isProjectDonationsLoading } = useGetProjectDonationsQuery({
    projectId: testInputs.projectId,
    page: 1,
    limit: 10,
    status: testInputs.status,
    includeAnonymous: true
  });

  const { data: userDonationsData, error: userDonationsError, refetch: refetchUserDonations, isLoading: isUserDonationsLoading } = useGetUserDonationsQuery({
    userId: testInputs.userId,
    page: 1,
    limit: 10,
    status: testInputs.status
  });

  const { data: recentDonationsData, error: recentDonationsError, refetch: refetchRecentDonations, isLoading: isRecentDonationsLoading } = useGetRecentDonationsQuery({
    limit: 10,
    includeAnonymous: true
  });

  const { data: qrData, error: qrError, refetch: refetchQR, isLoading: isQRLoading } = useGetDonationQRQuery({
    id: testInputs.donationId,
    format: testInputs.qrFormat
  }, {
    skip: !testInputs.donationId
  });

  const { data: pendingRewardsData, error: pendingRewardsError, refetch: refetchPendingRewards, isLoading: isPendingRewardsLoading } = useGetPendingRewardsQuery({
    page: 1,
    limit: 20,
    projectId: testInputs.projectId,
    minValue: 10
  });

  const { data: statisticsData, error: statisticsError, refetch: refetchStatistics, isLoading: isStatisticsLoading } = useGetDonationStatisticsQuery({
    projectId: testInputs.projectId,
    startDate: testInputs.startDate,
    endDate: testInputs.endDate,
    groupBy: testInputs.statisticsGroupBy
  });

  // Mutations
  const [redeemReward, { isLoading: isRedeeming, error: redeemError }] = useRedeemRewardMutation();
  const [updateDonorMessage, { isLoading: isUpdatingMessage, error: updateMessageError }] = useUpdateDonorMessageMutation();

  const [results, setResults] = useState([]);
  const [expandedResult, setExpandedResult] = useState(null);

  // Load saved inputs from localStorage
  useEffect(() => {
    const savedInputs = localStorage.getItem('donation-api-test-inputs');
    if (savedInputs) {
      try {
        setTestInputs(prev => ({ ...prev, ...JSON.parse(savedInputs) }));
      } catch (e) {
        console.error('Failed to load saved inputs:', e);
      }
    }
  }, []);

  // Save inputs to localStorage
  useEffect(() => {
    localStorage.setItem('donation-api-test-inputs', JSON.stringify(testInputs));
  }, [testInputs]);

  const addResult = (title, data, error = null, duration = null) => {
    const result = {
      timestamp: new Date().toISOString(),
      title,
      success: !error,
      data: error ? null : data,
      error: error?.data?.message || error?.message || error,
      duration,
      id: Math.random().toString(36).substr(2, 9)
    };
    setResults(prev => [result, ...prev.slice(0, 49)]);
  };

  const measureTime = (fn) => {
    return async (...args) => {
      const start = performance.now();
      try {
        const result = await fn(...args);
        const duration = Math.round(performance.now() - start);
        return { result, duration };
      } catch (error) {
        const duration = Math.round(performance.now() - start);
        throw { error, duration };
      }
    };
  };

  // Test handlers
  const handleTestDonations = async () => {
    try {
      const { result, duration } = await measureTime(refetchDonations)();
      addResult('Get All Donations', result.data, null, duration);
    } catch ({ error, duration }) {
      addResult('Get All Donations', null, error, duration);
    }
  };

  const handleTestDonation = async () => {
    if (!testInputs.donationId) {
      addResult('Get Single Donation', null, 'Donation ID is required');
      return;
    }
    try {
      const { result, duration } = await measureTime(refetchDonation)();
      addResult('Get Single Donation', result.data, null, duration);
    } catch ({ error, duration }) {
      addResult('Get Single Donation', null, error, duration);
    }
  };

  const handleTestProjectDonations = async () => {
    try {
      const { result, duration } = await measureTime(refetchProjectDonations)();
      addResult('Get Project Donations', result.data, null, duration);
    } catch ({ error, duration }) {
      addResult('Get Project Donations', null, error, duration);
    }
  };

  const handleTestUserDonations = async () => {
    try {
      const { result, duration } = await measureTime(refetchUserDonations)();
      addResult('Get User Donations', result.data, null, duration);
    } catch ({ error, duration }) {
      addResult('Get User Donations', null, error, duration);
    }
  };

  const handleTestRecentDonations = async () => {
    try {
      const { result, duration } = await measureTime(refetchRecentDonations)();
      addResult('Get Recent Donations', result.data, null, duration);
    } catch ({ error, duration }) {
      addResult('Get Recent Donations', null, error, duration);
    }
  };

  const handleTestQR = async () => {
    if (!testInputs.donationId) {
      addResult('Get Donation QR', null, 'Donation ID is required');
      return;
    }
    try {
      const { result, duration } = await measureTime(refetchQR)();
      addResult('Get Donation QR', result.data, null, duration);
    } catch ({ error, duration }) {
      addResult('Get Donation QR', null, error, duration);
    }
  };

  const handleTestPendingRewards = async () => {
    try {
      const { result, duration } = await measureTime(refetchPendingRewards)();
      addResult('Get Pending Rewards', result.data, null, duration);
    } catch ({ error, duration }) {
      addResult('Get Pending Rewards', null, error, duration);
    }
  };

  const handleTestStatistics = async () => {
    try {
      const { result, duration } = await measureTime(refetchStatistics)();
      addResult('Get Donation Statistics', result.data, null, duration);
    } catch ({ error, duration }) {
      addResult('Get Donation Statistics', null, error, duration);
    }
  };

  const handleRedeemReward = async () => {
    if (!testInputs.donationId) {
      addResult('Redeem Reward', null, 'Donation ID is required');
      return;
    }
    try {
      const start = performance.now();
      const result = await redeemReward({
        id: testInputs.donationId,
        notes: testInputs.redeemNotes,
        redeemedBy: testInputs.redeemedBy
      }).unwrap();
      const duration = Math.round(performance.now() - start);
      addResult('Redeem Reward', result, null, duration);
    } catch (error) {
      addResult('Redeem Reward', null, error);
    }
  };

  const handleUpdateMessage = async () => {
    if (!testInputs.donationId) {
      addResult('Update Donor Message', null, 'Donation ID is required');
      return;
    }
    try {
      const start = performance.now();
      const result = await updateDonorMessage({
        id: testInputs.donationId,
        message: testInputs.donorMessage
      }).unwrap();
      const duration = Math.round(performance.now() - start);
      addResult('Update Donor Message', result, null, duration);
    } catch (error) {
      addResult('Update Donor Message', null, error);
    }
  };

  const LoadingSpinner = () => (
    <div className="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
  );

  const StatusIndicator = ({ data, error, isLoading }) => {
    if (isLoading) return <span className="text-blue-600 text-xs">Loading...</span>;
    if (error) return <span className="text-red-600 text-xs">Error</span>;
    if (data) return <span className="text-green-600 text-xs">Loaded</span>;
    return <span className="text-gray-400 text-xs">Not loaded</span>;
  };

  const testSections = [
    {
      id: 'project-overview',
      title: 'Project Overview',
      description: 'Your MongoDB Project Data',
      status: <span className="text-green-600 text-xs">Loaded</span>,
      component: (
        <div className="space-y-4">
          <div className="bg-green-50 border border-green-200 rounded-lg p-6">
            <h3 className="font-bold text-lg text-green-800 mb-2">{realProjectData.title}</h3>
            <p className="text-green-700 text-sm mb-4">{realProjectData.shortDescription}</p>
            
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="font-medium">Target:</span> BDT {realProjectData.targetAmount.toLocaleString()}
              </div>
              <div>
                <span className="font-medium">Current:</span> BDT {realProjectData.currentAmount.toLocaleString()}
              </div>
              <div>
                <span className="font-medium">Backers:</span> {realProjectData.backerCount}
              </div>
              <div>
                <span className="font-medium">Category:</span> {realProjectData.category}
              </div>
            </div>
            
            <div className="mt-4">
              <h4 className="font-medium mb-2">Reward Tiers:</h4>
              <div className="space-y-2">
                {realProjectData.rewardTiers.map(tier => (
                  <div key={tier._id} className="bg-white p-3 rounded border">
                    <div className="flex justify-between items-start">
                      <div>
                        <span className="font-medium">{tier.title}</span>
                        <p className="text-xs text-gray-600">{tier.description}</p>
                      </div>
                      <div className="text-right">
                        <div className="font-medium text-green-600">BDT {tier.minimumAmount}</div>
                        <div className="text-xs text-gray-500">{tier.currentBackers}/{tier.maxBackers} backers</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
          
          <div className="bg-blue-50 border border-blue-200 rounded p-4">
            <h4 className="font-medium text-blue-800 mb-2">Current Donation Status:</h4>
            <p className="text-sm text-blue-700">
              This project currently has {realProjectData.currentAmount} BDT raised and {realProjectData.backerCount} backers.
            </p>
            <p className="text-xs text-blue-600 mt-1">
              Perfect for testing empty states and first donations!
            </p>
          </div>
        </div>
      )
    },
    {
      id: 'all-donations',
      title: 'All Donations',
      description: 'GET /api/donations',
      status: <StatusIndicator data={donationsData} error={donationsError} isLoading={isDonationsLoading} />,
      component: (
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Min Amount:</label>
              <input
                type="number"
                value={testInputs.minAmount}
                onChange={(e) => setTestInputs(prev => ({ ...prev, minAmount: Number(e.target.value) }))}
                className="w-full border border-gray-300 rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Max Amount:</label>
              <input
                type="number"
                value={testInputs.maxAmount}
                onChange={(e) => setTestInputs(prev => ({ ...prev, maxAmount: Number(e.target.value) }))}
                className="w-full border border-gray-300 rounded px-3 py-2"
              />
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Start Date:</label>
              <input
                type="date"
                value={testInputs.startDate}
                onChange={(e) => setTestInputs(prev => ({ ...prev, startDate: e.target.value }))}
                className="w-full border border-gray-300 rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">End Date:</label>
              <input
                type="date"
                value={testInputs.endDate}
                onChange={(e) => setTestInputs(prev => ({ ...prev, endDate: e.target.value }))}
                className="w-full border border-gray-300 rounded px-3 py-2"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">Has Reward:</label>
            <select
              value={testInputs.hasReward}
              onChange={(e) => setTestInputs(prev => ({ ...prev, hasReward: e.target.value }))}
              className="w-full border border-gray-300 rounded px-3 py-2"
            >
              <option value="">All Donations</option>
              <option value="true">With Rewards</option>
              <option value="false">Without Rewards</option>
            </select>
          </div>

          <button
            onClick={handleTestDonations}
            disabled={isDonationsLoading}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2"
          >
            {isDonationsLoading && <LoadingSpinner />}
            Test Get All Donations
          </button>
          
          {donationsData && (
            <div className="bg-gray-50 p-4 rounded">
              <h4 className="font-medium mb-2">Current Data:</h4>
              <p className="text-sm text-gray-600">
                Found {donationsData?.data?.length || 0} donations
              </p>
              {donationsData?.meta && (
                <p className="text-xs text-gray-500">
                  Page {donationsData.meta.currentPage} of {donationsData.meta.totalPages} 
                  ({donationsData.meta.total} total)
                </p>
              )}
            </div>
          )}
          
          {donationsError && (
            <div className="bg-red-50 p-4 rounded">
              <p className="text-red-700 text-sm">{donationsError?.data?.message || 'Error loading donations'}</p>
            </div>
          )}
        </div>
      )
    },
    {
      id: 'single-donation',
      title: 'Single Donation',
      description: 'GET /api/donations/:id',
      status: <StatusIndicator data={donationData} error={donationError} isLoading={isDonationLoading} />,
      component: (
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">Donation ID:</label>
            <input
              type="text"
              value={testInputs.donationId}
              onChange={(e) => setTestInputs(prev => ({ ...prev, donationId: e.target.value }))}
              className="w-full border border-gray-300 rounded px-3 py-2"
              placeholder="Enter donation MongoDB ID"
            />
          </div>
          
          <button
            onClick={handleTestDonation}
            disabled={!testInputs.donationId || isDonationLoading}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2"
          >
            {isDonationLoading && <LoadingSpinner />}
            Test Get Single Donation
          </button>
          
          {donationData && (
            <div className="bg-gray-50 p-4 rounded">
              <h4 className="font-medium mb-2">Donation Details:</h4>
              <p className="text-sm text-gray-600">
                Amount: {donationData?.data?.displayAmount}
              </p>
              <p className="text-xs text-gray-500">
                Status: {donationData?.data?.paymentStatus} | 
                Reward Value: {donationData?.data?.rewardValue || 0}
              </p>
            </div>
          )}
          
          {donationError && (
            <div className="bg-red-50 p-4 rounded">
              <p className="text-red-700 text-sm">{donationError?.data?.message || 'Error loading donation'}</p>
            </div>
          )}
        </div>
      )
    },
    {
      id: 'project-donations',
      title: 'Project Donations',
      description: 'GET /api/donations/project/:projectId',
      status: <StatusIndicator data={projectDonationsData} error={projectDonationsError} isLoading={isProjectDonationsLoading} />,
      component: (
        <div className="space-y-4">
          <div className="bg-yellow-50 border border-yellow-200 rounded p-3">
            <p className="text-yellow-800 text-sm">
              Testing donations for: <strong>{realProjectData.title}</strong>
            </p>
            <p className="text-yellow-700 text-xs">Project ID: {testInputs.projectId}</p>
          </div>
          
          <button
            onClick={handleTestProjectDonations}
            disabled={isProjectDonationsLoading}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2"
          >
            {isProjectDonationsLoading && <LoadingSpinner />}
            Test Get Project Donations
          </button>
          
          {projectDonationsData && (
            <div className="bg-gray-50 p-4 rounded">
              <h4 className="font-medium mb-2">Project Donations:</h4>
              <p className="text-sm text-gray-600">
                Found {projectDonationsData?.data?.length || 0} donations for this project
              </p>
              {projectDonationsData?.meta && (
                <p className="text-xs text-gray-500">
                  Total: {projectDonationsData.meta.total} donations
                </p>
              )}
            </div>
          )}
          
          {projectDonationsError && (
            <div className="bg-red-50 p-4 rounded">
              <p className="text-red-700 text-sm">{projectDonationsError?.data?.message || 'Error loading project donations'}</p>
            </div>
          )}
        </div>
      )
    },
    {
      id: 'user-donations',
      title: 'User Donations',
      description: 'GET /api/donations/user/:userId',
      status: <StatusIndicator data={userDonationsData} error={userDonationsError} isLoading={isUserDonationsLoading} />,
      component: (
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">User ID:</label>
            <input
              type="text"
              value={testInputs.userId}
              onChange={(e) => setTestInputs(prev => ({ ...prev, userId: e.target.value }))}
              className="w-full border border-gray-300 rounded px-3 py-2"
              placeholder="Enter user Cognito ID"
            />
          </div>
          
          <button
            onClick={handleTestUserDonations}
            disabled={isUserDonationsLoading}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2"
          >
            {isUserDonationsLoading && <LoadingSpinner />}
            Test Get User Donations
          </button>
          
          {userDonationsData && (
            <div className="bg-gray-50 p-4 rounded">
              <h4 className="font-medium mb-2">User Donation History:</h4>
              <p className="text-sm text-gray-600">
                Found {userDonationsData?.data?.length || 0} donations by this user
              </p>
            </div>
          )}
          
          {userDonationsError && (
            <div className="bg-red-50 p-4 rounded">
              <p className="text-red-700 text-sm">{userDonationsError?.data?.message || 'Error loading user donations'}</p>
            </div>
          )}
        </div>
      )
    },
    {
      id: 'recent-donations',
      title: 'Recent Donations',
      description: 'GET /api/donations/recent',
      status: <StatusIndicator data={recentDonationsData} error={recentDonationsError} isLoading={isRecentDonationsLoading} />,
      component: (
        <div className="space-y-4">
          <button
            onClick={handleTestRecentDonations}
            disabled={isRecentDonationsLoading}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2"
          >
            {isRecentDonationsLoading && <LoadingSpinner />}
            Test Get Recent Donations
          </button>
          
          {recentDonationsData && (
            <div className="bg-gray-50 p-4 rounded">
              <h4 className="font-medium mb-2">Recent Donations Feed:</h4>
              <p className="text-sm text-gray-600">
                Found {recentDonationsData?.data?.length || 0} recent donations
              </p>
              <p className="text-xs text-gray-500">
                Perfect for homepage donation feed display
              </p>
            </div>
          )}
          
          {recentDonationsError && (
            <div className="bg-red-50 p-4 rounded">
              <p className="text-red-700 text-sm">{recentDonationsError?.data?.message || 'Error loading recent donations'}</p>
            </div>
          )}
        </div>
      )
    },
    {
      id: 'donation-qr',
      title: 'Donation QR Codes',
      description: 'GET /api/donations/:id/qr',
      status: <StatusIndicator data={qrData} error={qrError} isLoading={isQRLoading} />,
      component: (
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">Donation ID:</label>
            <input
              type="text"
              value={testInputs.donationId}
              onChange={(e) => setTestInputs(prev => ({ ...prev, donationId: e.target.value }))}
              className="w-full border border-gray-300 rounded px-3 py-2"
              placeholder="Enter donation ID with reward"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">QR Format:</label>
            <select
              value={testInputs.qrFormat}
              onChange={(e) => setTestInputs(prev => ({ ...prev, qrFormat: e.target.value }))}
              className="w-full border border-gray-300 rounded px-3 py-2"
            >
              <option value="url">URL (S3 Link)</option>
              <option value="base64">Base64 Data URL</option>
            </select>
          </div>
          
          <button
            onClick={handleTestQR}
            disabled={!testInputs.donationId || isQRLoading}
            className="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 disabled:opacity-50 flex items-center gap-2"
          >
            {isQRLoading && <LoadingSpinner />}
            Test Generate QR Code
          </button>
          
          {qrData && (
            <div className="bg-gray-50 p-4 rounded">
              <h4 className="font-medium mb-2">QR Code Generated:</h4>
              <p className="text-sm text-gray-600">
                Format: {qrData?.data?.format}
              </p>
              <p className="text-xs text-gray-500">
                Reward Value: {qrData?.data?.rewardValue} BDT | 
                Status: {qrData?.data?.rewardStatus}
              </p>
              {qrData?.data?.qrCodeUrl && (
                <a 
                  href={qrData.data.qrCodeUrl} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="text-blue-600 hover:text-blue-800 text-xs break-all"
                >
                  View QR Code
                </a>
              )}
            </div>
          )}
          
          {qrError && (
            <div className="bg-red-50 p-4 rounded">
              <p className="text-red-700 text-sm">{qrError?.data?.message || 'Error generating QR code'}</p>
            </div>
          )}
        </div>
      )
    },
    {
      id: 'pending-rewards',
      title: 'Pending Rewards',
      description: 'GET /api/donations/rewards/pending',
      status: <StatusIndicator data={pendingRewardsData} error={pendingRewardsError} isLoading={isPendingRewardsLoading} />,
      component: (
        <div className="space-y-4">
          <button
            onClick={handleTestPendingRewards}
            disabled={isPendingRewardsLoading}
            className="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700 disabled:opacity-50 flex items-center gap-2"
          >
            {isPendingRewardsLoading && <LoadingSpinner />}
            Test Get Pending Rewards
          </button>
          
          {pendingRewardsData && (
            <div className="bg-gray-50 p-4 rounded">
              <h4 className="font-medium mb-2">Pending Rewards:</h4>
              <p className="text-sm text-gray-600">
                Found {pendingRewardsData?.data?.length || 0} pending rewards
              </p>
              <p className="text-xs text-gray-500">
                These rewards are awaiting redemption by creators/admins
              </p>
            </div>
          )}
          
          {pendingRewardsError && (
            <div className="bg-red-50 p-4 rounded">
              <p className="text-red-700 text-sm">{pendingRewardsError?.data?.message || 'Error loading pending rewards'}</p>
            </div>
          )}
        </div>
      )
    },
    {
      id: 'redeem-reward',
      title: 'Redeem Reward',
      description: 'POST /api/donations/:id/redeem',
      status: null,
      component: (
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">Donation ID:</label>
            <input
              type="text"
              value={testInputs.donationId}
              onChange={(e) => setTestInputs(prev => ({ ...prev, donationId: e.target.value }))}
              className="w-full border border-gray-300 rounded px-3 py-2"
              placeholder="Enter donation ID with pending reward"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">Redemption Notes:</label>
            <textarea
              value={testInputs.redeemNotes}
              onChange={(e) => setTestInputs(prev => ({ ...prev, redeemNotes: e.target.value }))}
              className="w-full border border-gray-300 rounded px-3 py-2"
              rows="3"
              placeholder="Notes about reward redemption"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">Redeemed By:</label>
            <input
              type="text"
              value={testInputs.redeemedBy}
              onChange={(e) => setTestInputs(prev => ({ ...prev, redeemedBy: e.target.value }))}
              className="w-full border border-gray-300 rounded px-3 py-2"
              placeholder="Admin/Creator ID"
            />
          </div>
          
          <button
            onClick={handleRedeemReward}
            disabled={!testInputs.donationId || isRedeeming}
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 disabled:opacity-50 flex items-center gap-2"
          >
            {isRedeeming && <LoadingSpinner />}
            {isRedeeming ? 'Redeeming...' : 'Test Redeem Reward'}
          </button>
          
          {redeemError && (
            <div className="bg-red-50 p-4 rounded">
              <p className="text-red-700 text-sm">{redeemError?.data?.message || 'Error redeeming reward'}</p>
            </div>
          )}
        </div>
      )
    },
    {
      id: 'donation-statistics',
      title: 'Donation Statistics',
      description: 'GET /api/donations/statistics',
      status: <StatusIndicator data={statisticsData} error={statisticsError} isLoading={isStatisticsLoading} />,
      component: (
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Start Date:</label>
              <input
                type="date"
                value={testInputs.startDate}
                onChange={(e) => setTestInputs(prev => ({ ...prev, startDate: e.target.value }))}
                className="w-full border border-gray-300 rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">End Date:</label>
              <input
                type="date"
                value={testInputs.endDate}
                onChange={(e) => setTestInputs(prev => ({ ...prev, endDate: e.target.value }))}
                className="w-full border border-gray-300 rounded px-3 py-2"
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">Group By:</label>
            <select
              value={testInputs.statisticsGroupBy}
              onChange={(e) => setTestInputs(prev => ({ ...prev, statisticsGroupBy: e.target.value }))}
              className="w-full border border-gray-300 rounded px-3 py-2"
            >
              <option value="day">Daily</option>
              <option value="week">Weekly</option>
              <option value="month">Monthly</option>
            </select>
          </div>
          
          <button
            onClick={handleTestStatistics}
            disabled={isStatisticsLoading}
            className="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 disabled:opacity-50 flex items-center gap-2"
          >
            {isStatisticsLoading && <LoadingSpinner />}
            Test Get Donation Statistics
          </button>
          
          {statisticsData && (
            <div className="bg-gray-50 p-4 rounded">
              <h4 className="font-medium mb-2">Donation Analytics:</h4>
              <p className="text-sm text-gray-600">
                Statistics generated for {testInputs.statisticsGroupBy} grouping
              </p>
              {statisticsData?.data?.overview && (
                <div className="text-xs text-gray-500 mt-2">
                  <p>Total: {statisticsData.data.overview.totalAmount || 0} BDT</p>
                  <p>Count: {statisticsData.data.overview.donationCount || 0} donations</p>
                  <p>Average: {statisticsData.data.overview.averageDonation || 0} BDT</p>
                </div>
              )}
            </div>
          )}
          
          {statisticsError && (
            <div className="bg-red-50 p-4 rounded">
              <p className="text-red-700 text-sm">{statisticsError?.data?.message || 'Error loading statistics'}</p>
            </div>
          )}
        </div>
      )
    },
    {
      id: 'update-message',
      title: 'Update Donor Message',
      description: 'POST /api/donations/:id/message',
      status: null,
      component: (
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">Donation ID:</label>
            <input
              type="text"
              value={testInputs.donationId}
              onChange={(e) => setTestInputs(prev => ({ ...prev, donationId: e.target.value }))}
              className="w-full border border-gray-300 rounded px-3 py-2"
              placeholder="Enter donation ID to update"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">Donor Message:</label>
            <textarea
              value={testInputs.donorMessage}
              onChange={(e) => setTestInputs(prev => ({ ...prev, donorMessage: e.target.value }))}
              className="w-full border border-gray-300 rounded px-3 py-2"
              rows="3"
              placeholder="Update the donor's message"
            />
          </div>
          
          <button
            onClick={handleUpdateMessage}
            disabled={!testInputs.donationId || isUpdatingMessage}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2"
          >
            {isUpdatingMessage && <LoadingSpinner />}
            {isUpdatingMessage ? 'Updating...' : 'Test Update Message'}
          </button>
          
          {updateMessageError && (
            <div className="bg-red-50 p-4 rounded">
              <p className="text-red-700 text-sm">{updateMessageError?.data?.message || 'Error updating message'}</p>
            </div>
          )}
        </div>
      )
    }
  ];

  return (
    <div className="max-w-7xl mx-auto p-6 bg-gray-50 min-h-screen">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Donation API Test Suite</h1>
        <p className="text-gray-600">Test donation management, QR codes, and reward system functionality</p>
        
        <div className="mt-4 bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h3 className="font-medium text-blue-900 mb-2">API Status Overview</h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
            <div className="flex justify-between">
              <span>All Donations:</span>
              <StatusIndicator data={donationsData} error={donationsError} isLoading={isDonationsLoading} />
            </div>
            <div className="flex justify-between">
              <span>Project Donations:</span>
              <StatusIndicator data={projectDonationsData} error={projectDonationsError} isLoading={isProjectDonationsLoading} />
            </div>
            <div className="flex justify-between">
              <span>Recent:</span>
              <StatusIndicator data={recentDonationsData} error={recentDonationsError} isLoading={isRecentDonationsLoading} />
            </div>
            <div className="flex justify-between">
              <span>Statistics:</span>
              <StatusIndicator data={statisticsData} error={statisticsError} isLoading={isStatisticsLoading} />
            </div>
          </div>
        </div>

        <div className="mt-4 bg-orange-50 border border-orange-200 rounded-lg p-3">
          <div className="flex items-center gap-2">
            <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
            <span className="text-orange-800 text-sm font-medium">
              Donation & QR System Testing - Real API Calls
            </span>
          </div>
          <p className="text-orange-700 text-xs mt-1">
            Test the complete donation lifecycle from payment to reward redemption
          </p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        
        {/* Test Navigation */}
        <div className="lg:col-span-1">
          <div className="bg-white border rounded-lg p-4 sticky top-6">
            <h2 className="font-semibold text-gray-900 mb-4">Test Categories</h2>
            <nav className="space-y-2">
              {testSections.map((section) => (
                <button
                  key={section.id}
                  onClick={() => setActiveTest(section.id)}
                  className={`w-full text-left px-3 py-2 rounded text-sm flex justify-between items-center ${
                    activeTest === section.id
                      ? 'bg-blue-100 text-blue-700 font-medium'
                      : 'text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  <span>{section.title}</span>
                  {section.status}
                </button>
              ))}
            </nav>
            
            <div className="mt-6 pt-4 border-t space-y-2">
              <button
                onClick={() => setResults([])}
                className="w-full text-sm text-gray-500 hover:text-gray-700 py-2"
              >
                Clear Results ({results.length})
              </button>
              <div className="text-xs text-gray-400">
                All inputs auto-saved to localStorage
              </div>
            </div>
          </div>
        </div>

        {/* Test Content */}
        <div className="lg:col-span-2">
          <div className="bg-white border rounded-lg p-6">
            {testSections.map((section) => (
              activeTest === section.id && (
                <div key={section.id}>
                  <div className="mb-6">
                    <h2 className="text-2xl font-semibold text-gray-900 mb-2">{section.title}</h2>
                    <div className="bg-blue-50 border border-blue-200 rounded px-3 py-2">
                      <code className="text-sm text-blue-800">{section.description}</code>
                    </div>
                  </div>
                  {section.component}
                </div>
              )
            ))}
          </div>
        </div>

        {/* Results */}
        <div className="lg:col-span-1">
          <div className="bg-white border rounded-lg p-6">
            <h2 className="font-semibold text-gray-900 mb-4">
              Test Results ({results.length})
            </h2>
            
            {results.length === 0 ? (
              <div className="text-center py-8">
                <div className="text-gray-400 text-3xl mb-2">💝</div>
                <p className="text-gray-500 text-sm">No tests run yet</p>
                <p className="text-gray-400 text-xs">Donation API results will appear here</p>
              </div>
            ) : (
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {results.map((result) => (
                  <div 
                    key={result.id}
                    className={`border rounded-lg p-3 ${
                      result.success 
                        ? 'border-green-200 bg-green-50' 
                        : 'border-red-200 bg-red-50'
                    }`}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <span className={`text-xs font-medium ${
                        result.success ? 'text-green-800' : 'text-red-800'
                      }`}>
                        {result.success ? 'SUCCESS' : 'FAILED'}
                      </span>
                      <div className="flex items-center gap-2 text-xs text-gray-500">
                        {result.duration && (
                          <span className={`px-1 rounded ${result.duration < 1000 ? 'bg-green-100' : result.duration < 3000 ? 'bg-yellow-100' : 'bg-red-100'}`}>
                            {result.duration}ms
                          </span>
                        )}
                        <span>
                          {new Date(result.timestamp).toLocaleTimeString()}
                        </span>
                      </div>
                    </div>
                    
                    <h4 className="text-sm font-medium text-gray-900 mb-1">
                      {result.title}
                    </h4>
                    
                    {result.success ? (
                      <div>
                        <p className="text-xs text-gray-600 mb-2">
                          API call successful
                        </p>
                        {result.data && (
                          <button
                            onClick={() => setExpandedResult(
                              expandedResult === result.id ? null : result.id
                            )}
                            className="text-xs text-blue-600 hover:text-blue-800"
                          >
                            {expandedResult === result.id ? 'Hide' : 'Show'} Response
                          </button>
                        )}
                        {expandedResult === result.id && result.data && (
                          <div className="mt-2 p-2 bg-white rounded border">
                            <pre className="text-xs text-gray-700 whitespace-pre-wrap max-h-32 overflow-y-auto">
                              {JSON.stringify(result.data, null, 2)}
                            </pre>
                          </div>
                        )}
                      </div>
                    ) : (
                      <p className="text-xs text-red-700">
                        {result.error}
                      </p>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Quick Actions Bar */}
      <div className="fixed bottom-6 right-6">
        <div className="bg-white border rounded-lg shadow-lg p-4">
          <h3 className="font-medium text-gray-900 mb-3">Quick Actions</h3>
          <div className="space-y-2">
            <button
              onClick={handleTestProjectDonations}
              disabled={isProjectDonationsLoading}
              className="w-full text-left text-sm px-3 py-2 rounded bg-blue-50 hover:bg-blue-100 disabled:opacity-50"
            >
              Test Project Donations
            </button>
            <button
              onClick={handleTestRecentDonations}
              disabled={isRecentDonationsLoading}
              className="w-full text-left text-sm px-3 py-2 rounded bg-green-50 hover:bg-green-100 disabled:opacity-50"
            >
              Test Recent Donations
            </button>
            <button
              onClick={() => {
                handleTestDonations();
                setTimeout(() => handleTestProjectDonations(), 1000);
                setTimeout(() => handleTestStatistics(), 2000);
              }}
              className="w-full text-left text-sm px-3 py-2 rounded bg-purple-50 hover:bg-purple-100"
            >
              Run All Read Tests
            </button>
          </div>
        </div>
      </div>

      {/* Current Donation Helper */}
      {testInputs.donationId && (
        <div className="fixed bottom-6 left-6">
          <div className="bg-white border rounded-lg shadow-lg p-4 max-w-xs">
            <h3 className="font-medium text-gray-900 mb-2">Current Donation</h3>
            <p className="text-xs text-gray-600 mb-2 font-mono break-all">
              {testInputs.donationId}
            </p>
            <div className="space-y-1">
              <button
                onClick={handleTestDonation}
                disabled={isDonationLoading}
                className="w-full text-left text-xs px-2 py-1 rounded bg-blue-50 hover:bg-blue-100 disabled:opacity-50"
              >
                {isDonationLoading ? 'Loading...' : 'Get Details'}
              </button>
              <button
                onClick={handleTestQR}
                disabled={isQRLoading}
                className="w-full text-left text-xs px-2 py-1 rounded bg-purple-50 hover:bg-purple-100 disabled:opacity-50"
              >
                {isQRLoading ? 'Generating...' : 'Generate QR'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DonationAPITest;